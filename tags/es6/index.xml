<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>es6 on TomtomYoung Blog</title>
    <link>https://gaoshanwomeng.github.io/tags/es6/</link>
    <description>Recent content in es6 on TomtomYoung Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://gaoshanwomeng.github.io/tags/es6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>es6 class</title>
      <link>https://gaoshanwomeng.github.io/post/es6-class/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-class/</guid>
      <description>ES6提供了更接近传统语言的写法，引入了Class类的概念，作为对象的模板，通过class关键字，可以定义类。 基本上，ES6的class可以看作是一个语法糖，他的绝大部分功能ES5都可以做到，只是新的</description>
    </item>
    
    <item>
      <title>es6 map</title>
      <link>https://gaoshanwomeng.github.io/post/es6-map/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-map/</guid>
      <description>Map 对象 Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。 Maps 和 Objects 的区别 一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。 Map 中的键值是有序的（FIFO 原则），而添加到对</description>
    </item>
    
    <item>
      <title>es6 promise</title>
      <link>https://gaoshanwomeng.github.io/post/es6-promise/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-promise/</guid>
      <description>promise是ES6引入的异步编程的新解决方案，语法上promise是一个构造函数，用来封装异步操作并可以获取其成功或者失败的结果。 Promise构造函数：Promise(excutor){ } Promise.prototype.then 方法</description>
    </item>
    
    <item>
      <title>es6 set</title>
      <link>https://gaoshanwomeng.github.io/post/es6-set/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-set/</guid>
      <description>Set 对象 Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。 Set 中的特殊值 Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待： +0 与 -0 在存储判断唯一性的时候是恒等的，所</description>
    </item>
    
    <item>
      <title>es6 对象方法扩展</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/</guid>
      <description>1//1. Object.is 判断两个值是否完全相等 2console.log(Object.is(120, 120));// === 3console.log(Object.is(NaN, NaN));// === 4console.log(NaN === NaN);// === 5 6//2. Object.assign 对象的合并 7const config1 = { 8 host: &amp;#39;localhost&amp;#39;, 9 port: 3306, 10 name: &amp;#39;root&amp;#39;, 11 pass: &amp;#39;root&amp;#39;, 12 test: &amp;#39;test&amp;#39; 13}; 14const config2 = { 15 host: &amp;#39;http://atguigu.com&amp;#39;, 16 port: 33060, 17 name: &amp;#39;atguigu.com&amp;#39;, 18 pass: &amp;#39;iloveyou&amp;#39;, 19 test2: &amp;#39;test2&amp;#39; 20} 21// config1中的部分属性被config2对应属性值替换</description>
    </item>
    
    <item>
      <title>es6 数值扩展</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E6%95%B0%E5%80%BC%E6%89%A9%E5%B1%95/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E6%95%B0%E5%80%BC%E6%89%A9%E5%B1%95/</guid>
      <description>1. Number.EPSILON Number.EPSILON 是 JavaScript 表示的最小精度 EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16 1function equal(a, b){ 2 if(Math.abs(a-b) &amp;lt; Number.EPSILON){ 3 return true; 4 }else{ 5 return false; 6 } 7} 8console.log(0.1 + 0.2 === 0.3); // false 0.1+1.2 = 0.30000000000000004 9console.log(equal(0.1 + 0.2, 0.3)) // true 10 2. 二进制和八进制 1let b = 0b1010; 2let o = 0o777; 3let d = 100; 4let x = 0xff; 5console.log(x); 3. Number.isFinite Number.isFinite 检测一个数值是否为有限数 1console.log(Number.isFinite(100)); 2console.log(Number.isFinite(100/0)); 3console.log(Number.isFinite(Infinity)); 4.</description>
    </item>
    
    <item>
      <title>es6 生成器</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>什么是生成器 生成器其实就是一个特殊的函数，是异步编程的一种解决方案 1//函数代码的分隔符 2function * gen(){ 3 console.log(111); 4 yield &amp;#39;一只没有耳朵&amp;#39;; 5 console.log(222); 6 yield &amp;#39;一只没有尾部&amp;#39;; 7 console.log(333); 8 yield &amp;#39;真奇</description>
    </item>
    
    <item>
      <title>es6 生成器2</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E7%94%9F%E6%88%90%E5%99%A82/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E7%94%9F%E6%88%90%E5%99%A82/</guid>
      <description>generator（生成器）是ES6标准引入的新的数据类型。最大特点就是可以交出函数的执行权（即暂停执行）。一个generator看上去像一个函数,区别就是函数名前面多了一个星号 *，但可以返回多次。与</description>
    </item>
    
    <item>
      <title>es6 rest参数</title>
      <link>https://gaoshanwomeng.github.io/post/es6-rest%E5%8F%82%E6%95%B0/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-rest%E5%8F%82%E6%95%B0/</guid>
      <description>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments。 1 2// ES5 获取实参的方式 3function date(){ 4 console.log(arguments); 5} 6date(&amp;#39;白芷&amp;#39;,&amp;#39;阿娇&amp;#39;,&amp;#39;思慧&amp;#39;); 7 8// rest 参数 9function date(...args){ 10</description>
    </item>
    
    <item>
      <title>es6 symbol</title>
      <link>https://gaoshanwomeng.github.io/post/es6-symbol/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-symbol/</guid>
      <description>1. 为什么会出现Symbol 对象在 JavaScript 语言中扮演重要角色，它们的使用无处不在。对象通常用作键/值对的集合，然而，以这种方式使用它们有一个很大的限制: 在 symbol 出现之前，对象键只能是字符串，如果试图使用非字符串值</description>
    </item>
    
    <item>
      <title>es6 扩展运算符</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>『&amp;hellip;』 扩展运算符能将『数组』转换为逗号分隔的『参数序列』 1//声明一个数组 ... 2const tfboys = [&amp;#39;易烊千玺&amp;#39;,&amp;#39;王源&amp;#39;,&amp;#39;王俊凯&amp;#39;]; 3// =&amp;gt; &amp;#39;易</description>
    </item>
    
    <item>
      <title>es6 函数参数初始值</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%9D%E5%A7%8B%E5%80%BC/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%9D%E5%A7%8B%E5%80%BC/</guid>
      <description>ES6 允许给函数参数赋值初始值 1//1. 形参初始值 具有默认值的参数, 一般位置要靠后(潜规则) 2function add(a,c=10,b) { 3 return a + b + c; 4} 5let result = add(1,2); 6console.log(result); 7 8//2. 与解构赋值结合 9function connect({host=&amp;#34;127.0.0.1&amp;#34;, username,password, port}){ 10 console.log(host) 11 console.log(username) 12 console.log(password) 13 console.log(port) 14} 15connect({ 16 host: &amp;#39;atguigu.com&amp;#39;, 17 username: &amp;#39;root&amp;#39;, 18 password: &amp;#39;root&amp;#39;, 19 port: 3306 20})</description>
    </item>
    
    <item>
      <title>es6 模板字符串</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>字符串模板引擎 ES5中的字符串缺乏多行字符串、字符串格式化、HTML转义等特性。 而ES6通过模板字面量的方式进行了填补，模板字面量试着跳出JS已有的字符串体系，通过一些全新的方法来解决问题。 1.基本用</description>
    </item>
    
    <item>
      <title>es6 箭头函数</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 1.基础语法 通常函数的定义方法: 1var fn1 = function(a, b) { 2 return a + b 3} 4 5function fn2(a, b) { 6 return a + b 7} 使用ES6箭头函数语法定义函数，将原函数的“func</description>
    </item>
    
    <item>
      <title>es6 箭头函数2</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B02/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B02/</guid>
      <description>ES6 允许使用「箭头」（=&amp;gt;）定义函数。 声明一个函数 1let fn = function(){ 2 3} 4let fn = (*a*,*b*) =&amp;gt; { 5 return *a* + *b*; 6} 调用函数 1let result = fn(1, 2); 2console.log(result); 箭头函数特性 this 始终指向函数声明时所在作用域下的 this 1function getName(){ 2 console.log(this.name); 3} 4let getName2 = () =&amp;gt; { 5 console.log(this.name); 6} 7 8//设置 window</description>
    </item>
    
    <item>
      <title>es6 解构赋值</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</guid>
      <description>解构赋值 什么是解构赋值？ 在语法上，就是赋值的作用，解构为（左边一种解构。右边一种解构，左右一一对应进入赋值） 解构赋值的分类。 左右为数组即为数组解构赋值； 左右为对象即为对象解构赋值； 左边是数组，右边是字</description>
    </item>
    
    <item>
      <title>es6 const</title>
      <link>https://gaoshanwomeng.github.io/post/es6-const/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-const/</guid>
      <description>es6中新增了一个const。就是用来定义一个常量的。有一下特性： 常量名一般大写； 和let一样，块级作用域； 一定要赋初值； 对数组和对象的元素修改，不算做对常量的修改，不会报错； 问题来了： 1let obj = {&amp;#39;num1&amp;#39; : 20, &amp;#39;num2&amp;#39;</description>
    </item>
    
    <item>
      <title>es6 let</title>
      <link>https://gaoshanwomeng.github.io/post/es6-let/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-let/</guid>
      <description>let命令的用法 let是es6中的声明一个变量的命令，只在它声明的代码块中有效，出了这个代码块就会报错。也非常适合for循环，在循环中i的值只在循环语句中生效，在外边取不到的。 var命令声明的是一个全</description>
    </item>
    
  </channel>
</rss>
